package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate p;
    private DbIterator child1;
    private DbIterator child2;
    private HashMap<Field, ArrayList<Tuple>> map;    

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        this.map = new HashMap<>();
    }

    public JoinPredicate getJoinPredicate() {
        return p;
    }

    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }
    
    public String getJoinField1Name()
    {
        return this.child1.getTupleDesc().getFieldName(p.getField1());
    }

    public String getJoinField2Name()
    {
        return this.child2.getTupleDesc().getFieldName(p.getField2());
    }

    private void loadMap() throws DbException, NoSuchElementException,
        TransactionAbortedException {
        map.clear();

        while (child1.hasNext()) {
            Tuple tuple = child1.next();
            Field field = tuple.getField(p.getField1());
            if (map.containsKey(field))
                map.get(field).add(tuple);
            else
                map.put(field, new ArrayList<Tuple>(Arrays.asList(tuple)));
        }
    }
    
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        child1.open();
        child2.open();
        loadMap();
    }

    public void close() {
        child1.close();
        child2.close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        this.close();
        this.open();
    }

    transient Iterator<Tuple> listIt = null;
    transient private Tuple joined = null;

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        while ((listIt == null || !listIt.hasNext()) 
                && child2.hasNext()) {
            joined = child2.next();

            Field f = joined.getField(p.getField2());
            if (map.containsKey(f))
                listIt = map.get(f).iterator();
        }        

        if (listIt == null || !listIt.hasNext() || joined == null) return null;

        Tuple tuple = listIt.next();
        Tuple result = new Tuple (getTupleDesc());        

        int size1 = child1.getTupleDesc().numFields();
        int size2 = child2.getTupleDesc().numFields();
        for (int i = 0; i < size1; i++)
            result.setField(i, tuple.getField(i));                    
        for (int i = 0; i < size2; i++)
            result.setField(i + size1, joined.getField(i));

        return result;
    }

    @Override
    public DbIterator[] getChildren() {
        return new DbIterator[] {child1, child2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        this.child1 = children[0];
        this.child2 = children[1];
    }
    
}
